//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.2
//     from Assets/InputActions/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""2323aedf-c280-4ec6-8596-4c33791ddab8"",
            ""actions"": [
                {
                    ""name"": ""ClearLetters"",
                    ""type"": ""Button"",
                    ""id"": ""e8f03a85-00ff-46df-b84a-9eae0631d63e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ClearLetterPanel"",
                    ""type"": ""Button"",
                    ""id"": ""cf54505d-6885-4a3e-8156-8b8d3a576449"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchWordPedia"",
                    ""type"": ""Button"",
                    ""id"": ""0c19a4e4-22f3-42d8-acd6-53d3756161ef"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchMenu"",
                    ""type"": ""Button"",
                    ""id"": ""64834894-1a0c-40f5-bc9f-be9ccb46ed24"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d50ad769-5b07-4609-b511-4b2fd08e6318"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""ClearLetters"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""40fcf90a-643f-4946-9487-7c2fc9857ff2"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""ClearLetterPanel"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2463655d-e7af-42a8-a98d-d0ef2de59840"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""SwitchWordPedia"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aa2a911e-2555-4939-895f-36630a0be474"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse and Keyboard"",
                    ""action"": ""SwitchMenu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse and Keyboard"",
            ""bindingGroup"": ""Mouse and Keyboard"",
            ""devices"": []
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_ClearLetters = m_Player.FindAction("ClearLetters", throwIfNotFound: true);
        m_Player_ClearLetterPanel = m_Player.FindAction("ClearLetterPanel", throwIfNotFound: true);
        m_Player_SwitchWordPedia = m_Player.FindAction("SwitchWordPedia", throwIfNotFound: true);
        m_Player_SwitchMenu = m_Player.FindAction("SwitchMenu", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_ClearLetters;
    private readonly InputAction m_Player_ClearLetterPanel;
    private readonly InputAction m_Player_SwitchWordPedia;
    private readonly InputAction m_Player_SwitchMenu;
    public struct PlayerActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @ClearLetters => m_Wrapper.m_Player_ClearLetters;
        public InputAction @ClearLetterPanel => m_Wrapper.m_Player_ClearLetterPanel;
        public InputAction @SwitchWordPedia => m_Wrapper.m_Player_SwitchWordPedia;
        public InputAction @SwitchMenu => m_Wrapper.m_Player_SwitchMenu;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @ClearLetters.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnClearLetters;
                @ClearLetters.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnClearLetters;
                @ClearLetters.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnClearLetters;
                @ClearLetterPanel.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnClearLetterPanel;
                @ClearLetterPanel.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnClearLetterPanel;
                @ClearLetterPanel.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnClearLetterPanel;
                @SwitchWordPedia.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSwitchWordPedia;
                @SwitchWordPedia.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSwitchWordPedia;
                @SwitchWordPedia.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSwitchWordPedia;
                @SwitchMenu.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSwitchMenu;
                @SwitchMenu.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSwitchMenu;
                @SwitchMenu.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSwitchMenu;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ClearLetters.started += instance.OnClearLetters;
                @ClearLetters.performed += instance.OnClearLetters;
                @ClearLetters.canceled += instance.OnClearLetters;
                @ClearLetterPanel.started += instance.OnClearLetterPanel;
                @ClearLetterPanel.performed += instance.OnClearLetterPanel;
                @ClearLetterPanel.canceled += instance.OnClearLetterPanel;
                @SwitchWordPedia.started += instance.OnSwitchWordPedia;
                @SwitchWordPedia.performed += instance.OnSwitchWordPedia;
                @SwitchWordPedia.canceled += instance.OnSwitchWordPedia;
                @SwitchMenu.started += instance.OnSwitchMenu;
                @SwitchMenu.performed += instance.OnSwitchMenu;
                @SwitchMenu.canceled += instance.OnSwitchMenu;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    private int m_MouseandKeyboardSchemeIndex = -1;
    public InputControlScheme MouseandKeyboardScheme
    {
        get
        {
            if (m_MouseandKeyboardSchemeIndex == -1) m_MouseandKeyboardSchemeIndex = asset.FindControlSchemeIndex("Mouse and Keyboard");
            return asset.controlSchemes[m_MouseandKeyboardSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnClearLetters(InputAction.CallbackContext context);
        void OnClearLetterPanel(InputAction.CallbackContext context);
        void OnSwitchWordPedia(InputAction.CallbackContext context);
        void OnSwitchMenu(InputAction.CallbackContext context);
    }
}
